# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(PY='#([^\\\\#]+|\\\\.)*?#'), r(INT='\\d+'), r(ID='[-$\\.a-zA-Z_\\u4e00-\\u9fa5][-$\\.a-zA-Z0-9_\\u4e00-\\u9fa5]*'), r(STRING='"([^\\\\"]+|\\\\.)*?"'), r(W='\\s+'), l[']'], l['['], ignores=['W'], reserved_map=ImmutableMap.from_dict({'runtime': 'quote runtime', 'load': 'quote load', 'store': 'quote store', 'deref': 'quote deref', 'refset': 'quote refset', 'const': 'quote const', 'pop': 'quote pop', 'rot': 'quote rot', 'dup': 'quote dup', 'goto': 'quote goto', 'goto-if': 'quote goto-if', 'goto-if-not': 'quote goto-if-not', 'label': 'quote label', 'call': 'quote call', 'print': 'quote print', 'list': 'quote list', 'tuple': 'quote tuple', 'return': 'quote return', 'line': 'quote line', 'defun': 'quote defun', 'document': 'quote document', 'filename': 'quote filename', 'free': 'quote free', 'name': 'quote name', 'args': 'quote args', 'firstlineno': 'quote firstlineno', '[': 'quote [', ']': 'quote ]'}), numbering={'BOF': 0, 'EOF': 1, 'quote runtime': 2, 'quote load': 3, 'quote store': 4, 'quote deref': 5, 'quote refset': 6, 'quote const': 7, 'quote pop': 8, 'quote rot': 9, 'quote dup': 10, 'quote goto': 11, 'quote goto-if': 12, 'quote goto-if-not': 13, 'quote label': 14, 'quote call': 15, 'quote print': 16, 'quote list': 17, 'quote tuple': 18, 'quote return': 19, 'quote line': 20, 'quote defun': 21, 'quote document': 22, 'quote filename': 23, 'quote free': 24, 'quote name': 25, 'quote args': 26, 'quote firstlineno': 27, 'quote [': 28, 'quote ]': 29, 'PY': 30, 'INT': 31, 'ID': 32, 'STRING': 33, 'W': 34})



def mk_parser():
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_Attrs(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_Attr(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('Attrs', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_Attrs(_slot_0, prim__state, prim__tokens):
        lr_Attrs_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_Attrs(lr_Attrs_reduce, prim__state, prim__tokens)
        lr_Attrs_try = lcl_0
        lcl_0 = lr_Attrs_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_Attrs_try[1]
            lcl_0 = lcl_0
            lr_Attrs_reduce = lcl_0
            lcl_0 = lr_step_Attrs(lr_Attrs_reduce, prim__state, prim__tokens)
            lr_Attrs_try = lcl_0
            lcl_0 = lr_Attrs_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_Attrs_reduce

    def lr_step_Instrs(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_Instr(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('Instrs', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_Instrs(_slot_0, prim__state, prim__tokens):
        lr_Instrs_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_Instrs(lr_Instrs_reduce, prim__state, prim__tokens)
        lr_Instrs_try = lcl_0
        lcl_0 = lr_Instrs_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_Instrs_try[1]
            lcl_0 = lcl_0
            lr_Instrs_reduce = lcl_0
            lcl_0 = lr_step_Instrs(lr_Instrs_reduce, prim__state, prim__tokens)
            lr_Instrs_try = lcl_0
            lcl_0 = lr_Instrs_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_Instrs_reduce

    def lr_step_StrList(_slot_0, prim__state, prim__tokens):
        lcl_0 = 33
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'STRING not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('StrList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_StrList(_slot_0, prim__state, prim__tokens):
        lr_StrList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_StrList(lr_StrList_reduce, prim__state, prim__tokens)
        lr_StrList_try = lcl_0
        lcl_0 = lr_StrList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_StrList_try[1]
            lcl_0 = lcl_0
            lr_StrList_reduce = lcl_0
            lcl_0 = lr_step_StrList(lr_StrList_reduce, prim__state, prim__tokens)
            lr_StrList_try = lcl_0
            lcl_0 = lr_StrList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_StrList_reduce

    def parse_Attr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 25):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 33
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'STRING not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Attr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 24):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = parse_Strs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Attr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 27):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 31
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'INT not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Attr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 33
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'STRING not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Attr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 33
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'STRING not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Attr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 26):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = parse_Strs(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Attr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Attr lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Attr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Attrs(prim__state, prim__tokens):
        lcl_0 = parse_Attr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('Attrs', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_Attrs(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_Instr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 31
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'INT not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 4):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'ID not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Instr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 9):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 31
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'INT not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 19):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('Instr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 6):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'ID not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Instr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 16):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('Instr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 8):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('Instr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 3):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'ID not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 31
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'INT not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Instr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 20):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 31
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'INT not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 14):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'ID not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Instr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 13):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'ID not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 12):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'ID not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Instr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 11):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'ID not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 31
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'INT not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Instr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'ID not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_2:
                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_4 = lcl_4.idint
                    if (lcl_4 == 18):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 4):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 9):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 19):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 6):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 16):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 8):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 25):
                        lcl_4 = parse_Attrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = parse_Instrs(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = lcl_5
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast('Instr', lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 3):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 17):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 20):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 14):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 13):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 12):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 11):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 24):
                        lcl_4 = parse_Attrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = parse_Instrs(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = lcl_5
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast('Instr', lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 27):
                        lcl_4 = parse_Attrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = parse_Instrs(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast('Instr', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 23):
                        lcl_4 = parse_Attrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = parse_Instrs(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = lcl_5
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast('Instr', lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 10):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 22):
                        lcl_4 = parse_Attrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = parse_Instrs(prim__state, prim__tokens)
                            _slot_2_check = lcl_5
                            lcl_5 = _slot_2_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_2_check
                            else:
                                lcl_5 = _slot_2_check[1]
                                lcl_5 = lcl_5
                                _slot_2 = lcl_5
                                lcl_5 = (_slot_0, _slot_1, _slot_2)
                                lcl_5 = prim__mk__ast('Instr', lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 5):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 21):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 7):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = (_slot_0, _slot_1)
                            lcl_4 = prim__mk__ast('Instr', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 15):
                        lcl_4 = parse_Instrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_4 = _slot_1_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_5 = _slot_1_check[1]
                            lcl_5 = lcl_5
                            _slot_1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1)
                            lcl_5 = prim__mk__ast('Instr', lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 26):
                        lcl_4 = parse_Attrs(prim__state, prim__tokens)
                        _slot_1_check = lcl_4
                        lcl_5 = _slot_1_check[0]
                        lcl_4 = (lcl_5 is False)
                        if lcl_4:
                            lcl_4 = _slot_1_check
                        else:
                            lcl_4 = _slot_1_check[1]
                            lcl_4 = lcl_4
                            _slot_1 = lcl_4
                            lcl_4 = parse_Instrs(prim__state, prim__tokens)
                            _slot_2_check = lcl_4
                            lcl_4 = _slot_2_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = (_slot_0, _slot_1, _slot_2)
                                lcl_4 = prim__mk__ast('Instr', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'Instr lookahead failed')
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_4
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, 'Instr got EOF')
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_4
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 30
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'PY not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = (_slot_0, _slot_1)
                    lcl_2 = prim__mk__ast('Instr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'ID not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1)
                    lcl_3 = prim__mk__ast('Instr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Instr lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Instr got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Instrs(prim__state, prim__tokens):
        lcl_0 = parse_Instr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('Instrs', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_Instrs(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'BOF not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = 2
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, 'quote runtime not match')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = 32
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'ID not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                else:
                    lcl_2 = prim__tokens.offset
                    _off_3 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_3 = lcl_3.idint
                        if (lcl_3 == 18):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 4):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 9):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 19):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 6):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 16):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 8):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 25):
                            lcl_3 = parse_Attrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = parse_Instrs(prim__state, prim__tokens)
                                _slot_4_check = lcl_3
                                lcl_3 = _slot_4_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = 1
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_5 is None)
                                    if lcl_3:
                                        lcl_3 = prim__tokens.offset
                                        lcl_3 = (lcl_3, 'EOF not match')
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = lcl_3
                                        lcl_3 = (False, lcl_3)
                                    else:
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_3 = prim__mk__ast('START', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 3):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 17):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 20):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 14):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 13):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 12):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 11):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 24):
                            lcl_3 = parse_Attrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = parse_Instrs(prim__state, prim__tokens)
                                _slot_4_check = lcl_3
                                lcl_3 = _slot_4_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = 1
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_5 is None)
                                    if lcl_3:
                                        lcl_3 = prim__tokens.offset
                                        lcl_3 = (lcl_3, 'EOF not match')
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = lcl_3
                                        lcl_3 = (False, lcl_3)
                                    else:
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_3 = prim__mk__ast('START', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 27):
                            lcl_3 = parse_Attrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = parse_Instrs(prim__state, prim__tokens)
                                _slot_4_check = lcl_3
                                lcl_3 = _slot_4_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = 1
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_5 is None)
                                    if lcl_3:
                                        lcl_3 = prim__tokens.offset
                                        lcl_3 = (lcl_3, 'EOF not match')
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = lcl_3
                                        lcl_3 = (False, lcl_3)
                                    else:
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_3 = prim__mk__ast('START', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 23):
                            lcl_3 = parse_Attrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = parse_Instrs(prim__state, prim__tokens)
                                _slot_4_check = lcl_3
                                lcl_3 = _slot_4_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = 1
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_5 is None)
                                    if lcl_3:
                                        lcl_3 = prim__tokens.offset
                                        lcl_3 = (lcl_3, 'EOF not match')
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = lcl_3
                                        lcl_3 = (False, lcl_3)
                                    else:
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_3 = prim__mk__ast('START', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 10):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 22):
                            lcl_3 = parse_Attrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = parse_Instrs(prim__state, prim__tokens)
                                _slot_4_check = lcl_3
                                lcl_3 = _slot_4_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = 1
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_5 is None)
                                    if lcl_3:
                                        lcl_3 = prim__tokens.offset
                                        lcl_3 = (lcl_3, 'EOF not match')
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = lcl_3
                                        lcl_3 = (False, lcl_3)
                                    else:
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_3 = prim__mk__ast('START', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 5):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 21):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 7):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 15):
                            lcl_3 = parse_Instrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = 1
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_4 = lcl_3
                                lcl_3 = (_slot_4 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'EOF not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('START', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif (lcl_3 == 26):
                            lcl_3 = parse_Attrs(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = parse_Instrs(prim__state, prim__tokens)
                                _slot_4_check = lcl_3
                                lcl_3 = _slot_4_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = 1
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_5 is None)
                                    if lcl_3:
                                        lcl_3 = prim__tokens.offset
                                        lcl_3 = (lcl_3, 'EOF not match')
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = lcl_3
                                        lcl_3 = (False, lcl_3)
                                    else:
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_3 = prim__mk__ast('START', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_3, 'START lookahead failed')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    else:
                        lcl_2 = (_off_3, 'START got EOF')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_StrList(prim__state, prim__tokens):
        lcl_0 = 33
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'STRING not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('StrList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_StrList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_Strs(prim__state, prim__tokens):
        lcl_0 = 28
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote [ not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 29):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast('Strs', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 33):
                    lcl_1 = parse_StrList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('Strs', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'Strs lookahead failed')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'Strs got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0
    return parse_START
