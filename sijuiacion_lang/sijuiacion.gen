import sijuiacion_lang.support;

abc Instr;
enum UOp POSITIVE NEGATIVE NOT INVERT;
enum BinOp POWER MULTIPLY MATRIX_MULTIPLY FLOOR_DIVIDE TRUE_DIVIDE MODULO ADD SUBTRACT SUBSCR LSHIFT RSHIFT AND XOR OR;

data Load(Instr) name:str;
data Store(Instr) name:str;
data Deref(Instr) name:str;
data RefSet(Instr) name:str;
data Const(Instr) val:object;

data Pop(Instr);
data ROT(Instr) n:int;
data DUP(Instr) n:int;

data Goto(Instr) label_name:str;
data GotoEq(Instr) label_name:str;
data GotoNEq(Instr) label_name:str;

data Label(Instr) label_name:str;
data BlockAddr(Instr) label_name:str;
data Indir(Instr);
data Switch(Instr) table:t.Dict[int, str];

data Bin(Instr) op:BinOp;
data IBin(Instr) op:BinOp;
data Un(Instr) op:UOp;
data Cmp(Instr) op:Compare;

data Attr(Instr) attr:str;
data AttrSet(Instr) attr:str;

data Item(Instr);
data ItemSet(Instr);

data Call(Instr) n:int;
data Print(Instr);

data BuildList(Instr) n:int;
data BuildTuple(Instr) n:int;
data ListAppend(Instr) n:int;

data Return(Instr);
data Line(Instr) no:int;
data Defun(Instr) doc:str filename:str free:t.List[str] name:str args:t.List[str] suite:t.List[t.Union[Line,Instr]];

data Mod filename:str tops:t.List[Instr];
